1.  IdentityServer4 is an open-source framework that helps developers add authentication and authorization functionality to their applications.
    
2.  The framework supports a variety of authentication protocols, including OAuth 2.0, OpenID Connect, and SAML.
    
3.  To get started with IdentityServer4, you'll need to have a basic understanding of ASP.NET Core and C#.
    
4.  IdentityServer4 can be used with a wide range of client applications, including web, mobile, and desktop applications.
    
5.  When working with IdentityServer4, it's important to understand the concept of scopes, which are used to define the permissions granted to clients.
    
6.  You'll also need to be familiar with the concept of claims, which are used to represent user information and permissions.
    
7.  IdentityServer4 provides a number of built-in features, such as support for multi-factor authentication and user consent.
    
8.  When implementing IdentityServer4, it's important to follow best practices for security, such as using strong passwords and encrypting sensitive data.
    
9.  The IdentityServer4 documentation is a great resource for learning more about the framework and how to use it effectively.
    
10.  Finally, it's important to test your IdentityServer4 implementation thoroughly to ensure that it's secure and functioning as expected.
    

These are just a few of the key points to keep in mind when learning IdentityServer4. As with any framework or technology, it's important to be patient.
Pakage: Các thư viện cần thêm vào để có thể triển khai IdentityServer4
	- Microsoft.AspNetCore.Identity.EntityFrameworkCore 6.0.13(.net 6)
	- Microsoft.AspNetCore.Identity.UI (6.0.13 .net 6)
	- Microsoft.EntityFrameworkCore.Tools(7.0.2 support .net 6)
	- Microsoft.EntityFrameworkCore.SqlServer(7.0.2 support.net6) 
	- Microsoft.Extensions.DependencyInjection(7.0.0)
	- IdentityServer4(4.1.2)
	- IdentityServer4.EntityFramework(4.1.2)
	- IdentityServer4.AspNetIdentity
	

	
 Config:- cấu hình cho identityServer4 ở Program.cs
	- Có 2 phương pháp cấu hình cho IdentityServer4: InMemory,Database
	
	* đây là cách cấu hình cho InMemory
	
	
	builder.Services.AddDbContext<ManageAppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"))); (// lấy ra connectionString)

        builder.Services.AddDefaultIdentity<ManageUser>(options => options.SignIn.RequireConfirmedAccount = true)
   	 .AddEntityFrameworkStores<ManageAppDbContext>();


	builder.Services.AddIdentityServer(options =>
	{   
    		options.Events.RaiseErrorEvents = true;
    		options.Events.RaiseInformationEvents = true;
    		options.Events.RaiseFailureEvents = true;
    		options.Events.RaiseSuccessEvents = true;
	})
    	.AddInMemoryApiResources(Config.Apis)
    	.AddInMemoryClients(builder.Configuration.GetSection("IdentityServer:Clients"))
    	.AddInMemoryIdentityResources(Config.Ids)
    	.AddInMemoryApiScopes(Config.ApiScopes)
    	.AddAspNetIdentity<ManageUser>()
    	.AddDeveloperSigningCredential(); =>  cấu hình InMemory: 



- cấu hình database : khi cấu hình database thì cần lấy được connectionString để lưu data
	var defaultConnString = builder.Configuration.GetConnectionString("DefaultConnection");


	builder.Services.AddDbContext<AspNetIdentityDbContext>(options =>
    		options.UseSqlServer(defaultConnString,b => b.MigrationsAssembly(assembly)));

	builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    		.AddEntityFrameworkStores<AspNetIdentityDbContext>();

	builder.Services.AddIdentityServer()
    	.AddAspNetIdentity<IdentityUser>()
    	.AddConfigurationStore(options =>
   	{
       		 options.ConfigureDbContext = b => b.UseSqlServer(defaultConnString, opt => opt.MigrationsAssembly(assembly));
    	}).AddOperationalStore(options =>
    		{
       			 options.ConfigureDbContext = b => b.UseSqlServer(defaultConnString, opt => opt.MigrationsAssembly(assembly));
    	}).AddDeveloperSigningCredential();


 	+ khi dùng IdentityServer4 sẽ cần cấu hình các ApiScope,Client
		.ApiScope: Api là 1 resource trong hệ thống của bạn mà bạn muốn bảo vệ, Resource có thể được tải với rất nhiều cách và lúc này chúng ta cần phải bảo vệ Api của chúng ta
			   dưới đây là cách để cấu hình 1 ApiScope
			Link Doc: https://identityserver4.readthedocs.io/en/latest/reference/api_scope.html
			
			ví dụ về khai báo 1 ApiScope:
			
			public static class Config
			{
    				public static IEnumerable<ApiScope> ApiScopes => new List<ApiScope>
        			{
            				new ApiScope("api1", "My API")
        			};
			}	
	
			

		.Client: được dùng để khai báo ứng dụng khách hàng nào có thể được truy cập vào API 
			link Doc: https://identityserver4.readthedocs.io/en/latest/reference/client.html
			
			ví dụ về việc khai báo 1 client mới:

			public static IEnumerable<Client> Clients => new List<Client>
    			{
        			new Client
        			{
            				ClientId = "client",

            				// no interactive user, use the clientid/secret for authentication
            				AllowedGrantTypes = GrantTypes.ClientCredentials,

            				// secret for authentication
            				ClientSecrets =
           	 			{
               				 new Secret("secret".Sha256())
           				 },

           				 // scopes that client has access to
           				 AllowedScopes = { "api1" }
       				 }
    			};	
			
